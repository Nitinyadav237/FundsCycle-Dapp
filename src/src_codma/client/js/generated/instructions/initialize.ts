/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: ReadonlyUint8Array;
  collateralAmount: bigint;
  monthlyPayout: bigint;
  paymentIntervalDays: number;
  maxBeneficiaries: number;
  withdrawPercent: number;
};

export type InitializeInstructionDataArgs = {
collateralAmount: number | bigint;
monthlyPayout: number | bigint;
paymentIntervalDays: number;
maxBeneficiaries: number;
withdrawPercent: number;
};

export function getInitializeInstructionDataEncoder(): FixedSizeEncoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['collateralAmount', getU64Encoder()],
      ['monthlyPayout', getU64Encoder()],
      ['paymentIntervalDays', getU16Encoder()],
      ['maxBeneficiaries', getU8Encoder()],
      ['withdrawPercent', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): FixedSizeDecoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['collateralAmount', getU64Decoder()],
    ['monthlyPayout', getU64Decoder()],
    ['paymentIntervalDays', getU16Decoder()],
    ['maxBeneficiaries', getU8Decoder()],
    ['withdrawPercent', getU8Decoder()],
  ]);
}

export function getInitializeInstructionDataCodec(): FixedSizeCodec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountAdmin extends string = string,
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  config?: Address<TAccountConfig>;
  vault?: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  collateralAmount: InitializeInstructionDataArgs['collateralAmount'];
  monthlyPayout: InitializeInstructionDataArgs['monthlyPayout'];
  paymentIntervalDays: InitializeInstructionDataArgs['paymentIntervalDays'];
  maxBeneficiaries: InitializeInstructionDataArgs['maxBeneficiaries'];
  withdrawPercent: InitializeInstructionDataArgs['withdrawPercent'];
};

export async function getInitializeInstructionAsync<
  TAccountAdmin extends string,
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountAdmin,
    TAccountConfig,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 111, 110, 102, 105, 103])),
        getAddressEncoder().encode(expectAddress(accounts.admin.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeInput<
  TAccountAdmin extends string = string,
  TAccountConfig extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  config: Address<TAccountConfig>;
  vault: Address<TAccountVault>;
  systemProgram?: Address<TAccountSystemProgram>;
  collateralAmount: InitializeInstructionDataArgs['collateralAmount'];
  monthlyPayout: InitializeInstructionDataArgs['monthlyPayout'];
  paymentIntervalDays: InitializeInstructionDataArgs['paymentIntervalDays'];
  maxBeneficiaries: InitializeInstructionDataArgs['maxBeneficiaries'];
  withdrawPercent: InitializeInstructionDataArgs['withdrawPercent'];
};

export function getInitializeInstruction<
  TAccountAdmin extends string,
  TAccountConfig extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountAdmin,
    TAccountConfig,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountConfig,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    config: TAccountMetas[1];
    vault: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      config: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
