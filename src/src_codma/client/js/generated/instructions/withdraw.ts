/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_DISCRIMINATOR = new Uint8Array([
  183, 18, 70, 156, 148, 109, 161, 34,
]);

export function getWithdrawDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
  TAccountWallet extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWallet extends string
        ? WritableSignerAccount<TAccountWallet> &
            AccountSignerMeta<TAccountWallet>
        : TAccountWallet,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBeneficiary extends string
        ? WritableAccount<TAccountBeneficiary>
        : TAccountBeneficiary,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = { discriminator: ReadonlyUint8Array };

export type WithdrawInstructionDataArgs = {};

export function getWithdrawInstructionDataEncoder(): FixedSizeEncoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: WITHDRAW_DISCRIMINATOR })
  );
}

export function getWithdrawInstructionDataDecoder(): FixedSizeDecoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getWithdrawInstructionDataCodec(): FixedSizeCodec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawAsyncInput<
  TAccountWallet extends string = string,
  TAccountConfig extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The wallet (caller) who must be the beneficiary for this turn */
  wallet: TransactionSigner<TAccountWallet>;
  /** Config PDA (seeds: ["config", admin_pubkey]) */
  config: Address<TAccountConfig>;
  /**
   * Beneficiary PDA for the caller
   * seeds = ["beneficiary", config.key(), wallet.key()]
   */
  beneficiary?: Address<TAccountBeneficiary>;
  /** Vault PDA holding lamports (seeds: ["vault", config.key()]) */
  vault?: Address<TAccountVault>;
  /** System program for SOL transfer CPI */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getWithdrawInstructionAsync<
  TAccountWallet extends string,
  TAccountConfig extends string,
  TAccountBeneficiary extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: WithdrawAsyncInput<
    TAccountWallet,
    TAccountConfig,
    TAccountBeneficiary,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawInstruction<
    TProgramAddress,
    TAccountWallet,
    TAccountConfig,
    TAccountBeneficiary,
    TAccountVault,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    wallet: { value: input.wallet ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.beneficiary.value) {
    accounts.beneficiary.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 101, 110, 101, 102, 105, 99, 105, 97, 114, 121])
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
        getAddressEncoder().encode(expectAddress(accounts.wallet.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([118, 97, 117, 108, 116])),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.wallet),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode({}),
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountWallet,
    TAccountConfig,
    TAccountBeneficiary,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawInput<
  TAccountWallet extends string = string,
  TAccountConfig extends string = string,
  TAccountBeneficiary extends string = string,
  TAccountVault extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The wallet (caller) who must be the beneficiary for this turn */
  wallet: TransactionSigner<TAccountWallet>;
  /** Config PDA (seeds: ["config", admin_pubkey]) */
  config: Address<TAccountConfig>;
  /**
   * Beneficiary PDA for the caller
   * seeds = ["beneficiary", config.key(), wallet.key()]
   */
  beneficiary: Address<TAccountBeneficiary>;
  /** Vault PDA holding lamports (seeds: ["vault", config.key()]) */
  vault: Address<TAccountVault>;
  /** System program for SOL transfer CPI */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getWithdrawInstruction<
  TAccountWallet extends string,
  TAccountConfig extends string,
  TAccountBeneficiary extends string,
  TAccountVault extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountWallet,
    TAccountConfig,
    TAccountBeneficiary,
    TAccountVault,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountWallet,
  TAccountConfig,
  TAccountBeneficiary,
  TAccountVault,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    wallet: { value: input.wallet ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.wallet),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.beneficiary),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode({}),
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountWallet,
    TAccountConfig,
    TAccountBeneficiary,
    TAccountVault,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The wallet (caller) who must be the beneficiary for this turn */
    wallet: TAccountMetas[0];
    /** Config PDA (seeds: ["config", admin_pubkey]) */
    config: TAccountMetas[1];
    /**
     * Beneficiary PDA for the caller
     * seeds = ["beneficiary", config.key(), wallet.key()]
     */

    beneficiary: TAccountMetas[2];
    /** Vault PDA holding lamports (seeds: ["vault", config.key()]) */
    vault: TAccountMetas[3];
    /** System program for SOL transfer CPI */
    systemProgram: TAccountMetas[4];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      wallet: getNextAccount(),
      config: getNextAccount(),
      beneficiary: getNextAccount(),
      vault: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
