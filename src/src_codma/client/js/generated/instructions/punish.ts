/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PUNISH_DISCRIMINATOR = new Uint8Array([
  111, 102, 66, 126, 232, 125, 236, 171,
]);

export function getPunishDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PUNISH_DISCRIMINATOR);
}

export type PunishInstruction<
  TProgram extends string = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountBeneficiary extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountBeneficiary extends string
        ? WritableAccount<TAccountBeneficiary>
        : TAccountBeneficiary,
      ...TRemainingAccounts,
    ]
  >;

export type PunishInstructionData = { discriminator: ReadonlyUint8Array };

export type PunishInstructionDataArgs = {};

export function getPunishInstructionDataEncoder(): FixedSizeEncoder<PunishInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: PUNISH_DISCRIMINATOR })
  );
}

export function getPunishInstructionDataDecoder(): FixedSizeDecoder<PunishInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getPunishInstructionDataCodec(): FixedSizeCodec<
  PunishInstructionDataArgs,
  PunishInstructionData
> {
  return combineCodec(
    getPunishInstructionDataEncoder(),
    getPunishInstructionDataDecoder()
  );
}

export type PunishInput<
  TAccountAdmin extends string = string,
  TAccountConfig extends string = string,
  TAccountBeneficiary extends string = string,
> = {
  /** Only admin can punish */
  admin: TransactionSigner<TAccountAdmin>;
  config: Address<TAccountConfig>;
  beneficiary: Address<TAccountBeneficiary>;
};

export function getPunishInstruction<
  TAccountAdmin extends string,
  TAccountConfig extends string,
  TAccountBeneficiary extends string,
  TProgramAddress extends Address = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
>(
  input: PunishInput<TAccountAdmin, TAccountConfig, TAccountBeneficiary>,
  config?: { programAddress?: TProgramAddress }
): PunishInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountConfig,
  TAccountBeneficiary
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: false },
    beneficiary: { value: input.beneficiary ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.beneficiary),
    ],
    programAddress,
    data: getPunishInstructionDataEncoder().encode({}),
  } as PunishInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountConfig,
    TAccountBeneficiary
  >;

  return instruction;
}

export type ParsedPunishInstruction<
  TProgram extends string = typeof FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Only admin can punish */
    admin: TAccountMetas[0];
    config: TAccountMetas[1];
    beneficiary: TAccountMetas[2];
  };
  data: PunishInstructionData;
};

export function parsePunishInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPunishInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      config: getNextAccount(),
      beneficiary: getNextAccount(),
    },
    data: getPunishInstructionDataDecoder().decode(instruction.data),
  };
}
