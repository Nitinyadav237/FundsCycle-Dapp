/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const VAULT_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  230, 251, 241, 83, 139, 202, 93, 28,
]);

export function getVaultAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VAULT_ACCOUNT_DISCRIMINATOR
  );
}

export type VaultAccount = {
  discriminator: ReadonlyUint8Array;
  config: Address;
  bump: number;
};

export type VaultAccountArgs = { config: Address; bump: number };

export function getVaultAccountEncoder(): FixedSizeEncoder<VaultAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['config', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: VAULT_ACCOUNT_DISCRIMINATOR })
  );
}

export function getVaultAccountDecoder(): FixedSizeDecoder<VaultAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['config', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getVaultAccountCodec(): FixedSizeCodec<
  VaultAccountArgs,
  VaultAccount
> {
  return combineCodec(getVaultAccountEncoder(), getVaultAccountDecoder());
}

export function decodeVaultAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VaultAccount, TAddress>;
export function decodeVaultAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VaultAccount, TAddress>;
export function decodeVaultAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<VaultAccount, TAddress> | MaybeAccount<VaultAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVaultAccountDecoder()
  );
}

export async function fetchVaultAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VaultAccount, TAddress>> {
  const maybeAccount = await fetchMaybeVaultAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVaultAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VaultAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVaultAccount(maybeAccount);
}

export async function fetchAllVaultAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VaultAccount>[]> {
  const maybeAccounts = await fetchAllMaybeVaultAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVaultAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VaultAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeVaultAccount(maybeAccount));
}

export function getVaultAccountSize(): number {
  return 41;
}
