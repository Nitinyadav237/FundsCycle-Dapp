/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const CONFIG_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  189, 255, 97, 70, 186, 189, 24, 102,
]);

export function getConfigAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CONFIG_ACCOUNT_DISCRIMINATOR
  );
}

export type ConfigAccount = {
  discriminator: ReadonlyUint8Array;
  admin: Address;
  collateralAmount: bigint;
  monthlyPayout: bigint;
  paymentIntervalDays: number;
  withdrawPercent: number;
  maxBeneficiaries: number;
  currentIndex: number;
  bump: number;
  claimable: boolean;
  claimsCompleted: number;
};

export type ConfigAccountArgs = {
  admin: Address;
  collateralAmount: number | bigint;
  monthlyPayout: number | bigint;
  paymentIntervalDays: number;
  withdrawPercent: number;
  maxBeneficiaries: number;
  currentIndex: number;
  bump: number;
  claimable: boolean;
  claimsCompleted: number;
};

export function getConfigAccountEncoder(): FixedSizeEncoder<ConfigAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['collateralAmount', getU64Encoder()],
      ['monthlyPayout', getU64Encoder()],
      ['paymentIntervalDays', getU16Encoder()],
      ['withdrawPercent', getU8Encoder()],
      ['maxBeneficiaries', getU8Encoder()],
      ['currentIndex', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['claimable', getBooleanEncoder()],
      ['claimsCompleted', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CONFIG_ACCOUNT_DISCRIMINATOR })
  );
}

export function getConfigAccountDecoder(): FixedSizeDecoder<ConfigAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['collateralAmount', getU64Decoder()],
    ['monthlyPayout', getU64Decoder()],
    ['paymentIntervalDays', getU16Decoder()],
    ['withdrawPercent', getU8Decoder()],
    ['maxBeneficiaries', getU8Decoder()],
    ['currentIndex', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['claimable', getBooleanDecoder()],
    ['claimsCompleted', getU8Decoder()],
  ]);
}

export function getConfigAccountCodec(): FixedSizeCodec<
  ConfigAccountArgs,
  ConfigAccount
> {
  return combineCodec(getConfigAccountEncoder(), getConfigAccountDecoder());
}

export function decodeConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ConfigAccount, TAddress>;
export function decodeConfigAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ConfigAccount, TAddress>;
export function decodeConfigAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ConfigAccount, TAddress> | MaybeAccount<ConfigAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigAccountDecoder()
  );
}

export async function fetchConfigAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ConfigAccount, TAddress>> {
  const maybeAccount = await fetchMaybeConfigAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfigAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ConfigAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConfigAccount(maybeAccount);
}

export async function fetchAllConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ConfigAccount>[]> {
  const maybeAccounts = await fetchAllMaybeConfigAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConfigAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ConfigAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeConfigAccount(maybeAccount));
}

export function getConfigAccountSize(): number {
  return 64;
}
