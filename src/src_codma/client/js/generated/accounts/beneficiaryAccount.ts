/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const BENEFICIARY_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  63, 115, 143, 239, 199, 217, 180, 40,
]);

export function getBeneficiaryAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BENEFICIARY_ACCOUNT_DISCRIMINATOR
  );
}

export type BeneficiaryAccount = {
  discriminator: ReadonlyUint8Array;
  config: Address;
  wallet: Address;
  bump: number;
  index: number;
  collateralPaid: boolean;
  monthlyPaid: boolean;
  lastPaymentTs: bigint;
  active: boolean;
  collateralClaimed: boolean;
};

export type BeneficiaryAccountArgs = {
  config: Address;
  wallet: Address;
  bump: number;
  index: number;
  collateralPaid: boolean;
  monthlyPaid: boolean;
  lastPaymentTs: number | bigint;
  active: boolean;
  collateralClaimed: boolean;
};

export function getBeneficiaryAccountEncoder(): FixedSizeEncoder<BeneficiaryAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['config', getAddressEncoder()],
      ['wallet', getAddressEncoder()],
      ['bump', getU8Encoder()],
      ['index', getU8Encoder()],
      ['collateralPaid', getBooleanEncoder()],
      ['monthlyPaid', getBooleanEncoder()],
      ['lastPaymentTs', getI64Encoder()],
      ['active', getBooleanEncoder()],
      ['collateralClaimed', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: BENEFICIARY_ACCOUNT_DISCRIMINATOR })
  );
}

export function getBeneficiaryAccountDecoder(): FixedSizeDecoder<BeneficiaryAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['config', getAddressDecoder()],
    ['wallet', getAddressDecoder()],
    ['bump', getU8Decoder()],
    ['index', getU8Decoder()],
    ['collateralPaid', getBooleanDecoder()],
    ['monthlyPaid', getBooleanDecoder()],
    ['lastPaymentTs', getI64Decoder()],
    ['active', getBooleanDecoder()],
    ['collateralClaimed', getBooleanDecoder()],
  ]);
}

export function getBeneficiaryAccountCodec(): FixedSizeCodec<
  BeneficiaryAccountArgs,
  BeneficiaryAccount
> {
  return combineCodec(
    getBeneficiaryAccountEncoder(),
    getBeneficiaryAccountDecoder()
  );
}

export function decodeBeneficiaryAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BeneficiaryAccount, TAddress>;
export function decodeBeneficiaryAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BeneficiaryAccount, TAddress>;
export function decodeBeneficiaryAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<BeneficiaryAccount, TAddress>
  | MaybeAccount<BeneficiaryAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBeneficiaryAccountDecoder()
  );
}

export async function fetchBeneficiaryAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BeneficiaryAccount, TAddress>> {
  const maybeAccount = await fetchMaybeBeneficiaryAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBeneficiaryAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BeneficiaryAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBeneficiaryAccount(maybeAccount);
}

export async function fetchAllBeneficiaryAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BeneficiaryAccount>[]> {
  const maybeAccounts = await fetchAllMaybeBeneficiaryAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBeneficiaryAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BeneficiaryAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeBeneficiaryAccount(maybeAccount)
  );
}

export function getBeneficiaryAccountSize(): number {
  return 86;
}
