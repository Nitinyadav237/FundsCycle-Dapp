/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS } from '../programs';

/** MaxBeneficiariesReached: Maximum number of beneficiaries reached */
export const FUNDS_CYCLE_PROGRAM_ERROR__MAX_BENEFICIARIES_REACHED = 0x1770; // 6000
/** CollateralAlreadyPaid: Collateral already paid */
export const FUNDS_CYCLE_PROGRAM_ERROR__COLLATERAL_ALREADY_PAID = 0x1771; // 6001
/** CollateralNotPaid: Collateral not paid */
export const FUNDS_CYCLE_PROGRAM_ERROR__COLLATERAL_NOT_PAID = 0x1772; // 6002
/** AlreadyPaidMonthly: Monthly contribution already paid */
export const FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_PAID_MONTHLY = 0x1773; // 6003
/** NotYourTurn: It's not your turn to withdraw */
export const FUNDS_CYCLE_PROGRAM_ERROR__NOT_YOUR_TURN = 0x1774; // 6004
/** MonthlyNotPaid: Monthly contribution not paid */
export const FUNDS_CYCLE_PROGRAM_ERROR__MONTHLY_NOT_PAID = 0x1775; // 6005
/** InactiveBeneficiary: Beneficiary is inactive */
export const FUNDS_CYCLE_PROGRAM_ERROR__INACTIVE_BENEFICIARY = 0x1776; // 6006
/** MathOverflow: Math overflow occurred */
export const FUNDS_CYCLE_PROGRAM_ERROR__MATH_OVERFLOW = 0x1777; // 6007
/** NoFundsAvailable: No funds available for withdrawal */
export const FUNDS_CYCLE_PROGRAM_ERROR__NO_FUNDS_AVAILABLE = 0x1778; // 6008
/** InsufficientVaultBalance: Insufficient balance in vault */
export const FUNDS_CYCLE_PROGRAM_ERROR__INSUFFICIENT_VAULT_BALANCE = 0x1779; // 6009
/** PaymentStillOnTime: Payment is still on time, cannot punish */
export const FUNDS_CYCLE_PROGRAM_ERROR__PAYMENT_STILL_ON_TIME = 0x177a; // 6010
/** InvalidBeneficiaryWallet: Invalid beneficiary wallet */
export const FUNDS_CYCLE_PROGRAM_ERROR__INVALID_BENEFICIARY_WALLET = 0x177b; // 6011
/** AlreadyClaimable: Claiming is already enabled */
export const FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_CLAIMABLE = 0x177c; // 6012
/** CycleNotComplete: Round robin cycle not complete */
export const FUNDS_CYCLE_PROGRAM_ERROR__CYCLE_NOT_COMPLETE = 0x177d; // 6013
/** MissingBeneficiaryAccount: Missing beneficiary account */
export const FUNDS_CYCLE_PROGRAM_ERROR__MISSING_BENEFICIARY_ACCOUNT = 0x177e; // 6014
/** AlreadyClaimed: Collateral already claimed */
export const FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_CLAIMED = 0x177f; // 6015
/** InsufficientVaultFunds: Insufficient funds in vault */
export const FUNDS_CYCLE_PROGRAM_ERROR__INSUFFICIENT_VAULT_FUNDS = 0x1780; // 6016
/** Unauthorized: Unauthorized access */
export const FUNDS_CYCLE_PROGRAM_ERROR__UNAUTHORIZED = 0x1781; // 6017
/** ClaimingNotEnabled: Claiming is not enabled */
export const FUNDS_CYCLE_PROGRAM_ERROR__CLAIMING_NOT_ENABLED = 0x1782; // 6018
/** NotAllClaimed: Not all beneficiaries have claimed */
export const FUNDS_CYCLE_PROGRAM_ERROR__NOT_ALL_CLAIMED = 0x1783; // 6019
/** InvalidConfig: Invalid config account */
export const FUNDS_CYCLE_PROGRAM_ERROR__INVALID_CONFIG = 0x1784; // 6020

export type FundsCycleProgramError =
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_CLAIMABLE
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_CLAIMED
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_PAID_MONTHLY
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__CLAIMING_NOT_ENABLED
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__COLLATERAL_ALREADY_PAID
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__COLLATERAL_NOT_PAID
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__CYCLE_NOT_COMPLETE
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__INACTIVE_BENEFICIARY
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__INSUFFICIENT_VAULT_BALANCE
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__INSUFFICIENT_VAULT_FUNDS
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__INVALID_BENEFICIARY_WALLET
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__INVALID_CONFIG
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__MATH_OVERFLOW
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__MAX_BENEFICIARIES_REACHED
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__MISSING_BENEFICIARY_ACCOUNT
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__MONTHLY_NOT_PAID
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__NO_FUNDS_AVAILABLE
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__NOT_ALL_CLAIMED
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__NOT_YOUR_TURN
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__PAYMENT_STILL_ON_TIME
  | typeof FUNDS_CYCLE_PROGRAM_ERROR__UNAUTHORIZED;

let fundsCycleProgramErrorMessages:
  | Record<FundsCycleProgramError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  fundsCycleProgramErrorMessages = {
    [FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_CLAIMABLE]: `Claiming is already enabled`,
    [FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_CLAIMED]: `Collateral already claimed`,
    [FUNDS_CYCLE_PROGRAM_ERROR__ALREADY_PAID_MONTHLY]: `Monthly contribution already paid`,
    [FUNDS_CYCLE_PROGRAM_ERROR__CLAIMING_NOT_ENABLED]: `Claiming is not enabled`,
    [FUNDS_CYCLE_PROGRAM_ERROR__COLLATERAL_ALREADY_PAID]: `Collateral already paid`,
    [FUNDS_CYCLE_PROGRAM_ERROR__COLLATERAL_NOT_PAID]: `Collateral not paid`,
    [FUNDS_CYCLE_PROGRAM_ERROR__CYCLE_NOT_COMPLETE]: `Round robin cycle not complete`,
    [FUNDS_CYCLE_PROGRAM_ERROR__INACTIVE_BENEFICIARY]: `Beneficiary is inactive`,
    [FUNDS_CYCLE_PROGRAM_ERROR__INSUFFICIENT_VAULT_BALANCE]: `Insufficient balance in vault`,
    [FUNDS_CYCLE_PROGRAM_ERROR__INSUFFICIENT_VAULT_FUNDS]: `Insufficient funds in vault`,
    [FUNDS_CYCLE_PROGRAM_ERROR__INVALID_BENEFICIARY_WALLET]: `Invalid beneficiary wallet`,
    [FUNDS_CYCLE_PROGRAM_ERROR__INVALID_CONFIG]: `Invalid config account`,
    [FUNDS_CYCLE_PROGRAM_ERROR__MATH_OVERFLOW]: `Math overflow occurred`,
    [FUNDS_CYCLE_PROGRAM_ERROR__MAX_BENEFICIARIES_REACHED]: `Maximum number of beneficiaries reached`,
    [FUNDS_CYCLE_PROGRAM_ERROR__MISSING_BENEFICIARY_ACCOUNT]: `Missing beneficiary account`,
    [FUNDS_CYCLE_PROGRAM_ERROR__MONTHLY_NOT_PAID]: `Monthly contribution not paid`,
    [FUNDS_CYCLE_PROGRAM_ERROR__NO_FUNDS_AVAILABLE]: `No funds available for withdrawal`,
    [FUNDS_CYCLE_PROGRAM_ERROR__NOT_ALL_CLAIMED]: `Not all beneficiaries have claimed`,
    [FUNDS_CYCLE_PROGRAM_ERROR__NOT_YOUR_TURN]: `It's not your turn to withdraw`,
    [FUNDS_CYCLE_PROGRAM_ERROR__PAYMENT_STILL_ON_TIME]: `Payment is still on time, cannot punish`,
    [FUNDS_CYCLE_PROGRAM_ERROR__UNAUTHORIZED]: `Unauthorized access`,
  };
}

export function getFundsCycleProgramErrorMessage(
  code: FundsCycleProgramError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      fundsCycleProgramErrorMessages as Record<FundsCycleProgramError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isFundsCycleProgramError<
  TProgramErrorCode extends FundsCycleProgramError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    FUNDS_CYCLE_PROGRAM_PROGRAM_ADDRESS,
    code
  );
}
